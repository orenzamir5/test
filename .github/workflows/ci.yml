# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  job1:
    name: job1
    strategy:
      matrix:
         service: [build]
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        id: job1
        run: | 
          chmod +x .github/scripts/runner.sh
          .github/scripts/runner.sh
          
  
  # This workflow contains a single job called "build"
  build:
    name: build
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo "slack message - ${{ steps.job1.outputs.slack_message }}"
        
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: check if file exists
        id: file_exists
        run: | 
          x=$(echo "bla" | grep a | wc -l)
          if [ $x == 0 ]; then
            echo "::set-output name=slack_message::file doesnt exists" 
          else
            echo "::set-output name=slack_message::file exists"
          fi
          sleep 5
          echo "second: $SECONDS"
          #jq -n --arg appname "bla" '{apps: [ {name: "bla", script: "./cms/bin/www", watch: false}]}' > ./payload-slack-content.json
          #jq -n --arg appname "bla" '{name: $appname, script: "./cms/bin/www", watch: false}' > ./payload-slack-content.json
          jq -n --arg appname "bla" '{"name": "app", "script": "./cms/bin/www"}' > ./payload-slack-content.json
      - name: slack message
        run: |
           echo "slack message - ${{ steps.file_exists.outputs.slack_message }}"
           sleep 2
           echo "second: $SECONDS"

#       - name: Post to a Slack channel
#         id: slack
#         uses: slackapi/slack-github-action@v1.19.0
#         with:
#           # Slack channel id, channel name, or user id to post message.
#           # See also: https://api.slack.com/methods/chat.postMessage#channels
#           channel-id: 'test'
#           #slack-message: "GitHub build result: ${{ job.status }}\n${{ github.event.pull_request.html_url || github.event.head_commit.url }}"
#           slack-message: "${{ steps.file_exists.outputs.slack_message }}"
#         env:
#           SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}


      - name: Send custom JSON data to Slack workflow
        id: slack
        uses: slackapi/slack-github-action@v1.19.0
        with:
          payload-file-path: "./payload-slack-content.json"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


      # EKS Login
#       - name: EKS Login
#         run: |
#            ls -al
#            exit 1
#           aws eks --region us-east-1 update-kubeconfig --name test-cluster
#           kubectl get ns

