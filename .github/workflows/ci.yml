## This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  GITHUB_RUN_NUMBER: "0.1.${{ github.run_number }}"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

#   aws:
#     #name: aws
#     #strategy:
#     #  matrix:
#     #     service: [build]
#     runs-on: ubuntu-latest
#     outputs:
#       output1: ${{ steps.check-helm-status.outputs.aws_var }}
#     steps:
#       - uses: actions/checkout@v3
#       # Runs a single command using the runners shell
# #       - name: Helm Status
# #         id: helm-status
# #         run: | 
# #           helm_histroy=$(cat .github/scripts/helm_history)
# #           helm_histroy="${helm_histroy//'%'/'%25'}"
# #           helm_histroy="${helm_histroy//$'\n'/'%0A'}"
# #           helm_histroy="${helm_histroy//$'\r'/'%0D'}"
# #           output_message="""
# #             Error! Cluster version: 0.1.2233, Desired version: 0.1.2231
# #             Cluster status: deployed
# #             History:
# #             ${helm_histroy}
# #           """
# #           #output_message=$(echo -e "bla1\n bla2")
# #           output_message="${output_message//'%'/'%25'}"
# #           output_message="${output_message//$'\n'/'%0A'}"
# #           output_message="${output_message//$'\r'/'%0D'}"
# #           echo "::set-output name=helm_status::$output_message"

# #       - name: Pods status
# #         id: pods-status
# #         run: |
# #           echo "slack message - ${{ steps.job1.outputs.slack_message }}"
# #           output='bla
# #           echo "::set-output name=pods_status::$output"
      
#       # Helm status
# #      - name: Check Helm Status
# #        id: check-helm-status
# #        run: exit 1 && chmod +x ./runner.sh && ./runner.sh ${{ env.GITHUB_RUN_NUMBER }}
# #        shell: bash
# #        working-directory: .github/scripts
                
#       - name: pull-request
#         id: open-pr
#         uses: repo-sync/pull-request@v2
#         with:
#           destination_branch: "staging"
#           github_token: ${{ secrets.GITHUB_TOKEN }}
#           pr_title: "Pulling ${{ github.ref }} into master" # Title of pull request
#           #pr_body: ":crown: *An automated PR*"
#           pr_draft: false
       
#       - name: output-number
#         run: echo ${{steps.open-pr.outputs.pr_number}}
      
#       - name: output-has-changed-files
#         run: echo ${{steps.open-pr.outputs.has_changed_files}}
      
#       - name: Enable Pull Request Automerge
#         if: steps.open-pr.outputs.has_changed_files == 'true'
#         uses: peter-evans/enable-pull-request-automerge@v2
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           pull-request-number: ${{ steps.open-pr.outputs.pr_number }}
#           merge-method: squash

#       - name: Create Pull Request
#         id: cpr
#         uses: peter-evans/create-pull-request@v4
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           commit-message: Update report
#           committer: GitHub <noreply@github.com>
#           author: ${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>
#           signoff: false
#           branch: staging
#           delete-branch: false
#           title: '[Example] Update report'
#           body: |
#             Update report
#             - Updated with *today's* date
#             - Auto-generated by [create-pull-request][1]

#             [1]: https://github.com/peter-evans/create-pull-request
#           labels: |
#             report
#             automated pr
#           #assignees: peter-evans
#           #reviewers: peter-evans
#           #team-reviewers: |
#           #  owners
#           #  maintainers
#           #milestone: 1
#           draft: true
        
#       # Pods status
#       - name: Check Pods Status
#         id: check-pods-status
#         run: ./check-pods-status.sh
#         shell: bash
#         working-directory: .github/deploy-checker

  test:
    #name: aws
    #strategy:
    #  matrix:
    #     service: [build]
    runs-on: ubuntu-latest
    #if: success()
    steps:
#      - with:
#          node: '19.x'
      - uses: actions/checkout@v3
      
      # Helm status
      - name: echo hello
        run: echo hello
        shell: bash

        
  azure:
    #name: aws
    #strategy:
    #  matrix:
    #     service: [build]
    runs-on: ubuntu-latest
    #if: success()
    outputs:
      output1: ${{ steps.check-helm-status.outputs.azure_var }}
      output2: ${{ steps.get-slack-user-id.outputs.slack_user_id }}
    steps:    
      - uses: actions/checkout@v3
      
      # Helm status
      - name: Check Helm Status
        id: check-helm-status
        run: chmod +x ./runner.sh && ./runner.sh azure
        shell: bash
        working-directory: .github/scripts
      
      - name: Get slack user ID
        id: get-slack-user-id
        run: chmod +x ./get-slack-user-id.sh && ./get-slack-user-id.sh BLA && echo "STATUS=noncolor" >> $GITHUB_ENV
        shell: bash
        working-directory: .github/scripts
        
      - name: Run NPM
        run: npm install -g @testim/testim-cli
        shell: bash
  
  
  slack:
    runs-on: ubuntu-latest
    needs: [test,azure]
    if: always() && !contains(needs.*.result, 'cancelled')
    steps:
    
      - uses: 8398a7/action-slack@v3
        with:
          mention: ${{ needs.azure.outputs.output2 }} # replace S012ABC3Y4Z with your user group id 
          if_mention: 'failure,cancelled'
          status: custom
          fields: workflow,job,commit,repo,ref,author,took,message,action
          custom_payload: |
            {
              attachments: [{
                color: '${{ needs.aws.result }}' === 'success' && '${{ needs.azure.result }}' === 'success' ? 'good' : '${{ needs.azure.result }}' === 'failure' || '${{ env.STATUS }}' === 'noncolor' ? '' : '',
                text: `
            SLACK_USER_ID: ${{ needs.azure.outputs.output2 }},
            GITHUB_RUN_NUMBER: ${{ env.GITHUB_RUN_NUMBER }},
            AWS: ${{ needs.aws.outputs.output1 }},
            BLA:
            ${{ env.JSON_RESPONSE }},
            AZURE:
            ${{ needs.azure.outputs.output1 }},
            DEPLOYMENT_STATUS: ${{ env.DEPLOYMENT_STATUS }},
            JOB AWS STATUS: ${{ needs.aws.result }},
            JOB AZURE STATUS: ${{ needs.azure.result }}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  

  # This workflow contains a single job called "build"
#   build:
#     name: build
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v3

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo "slack message - ${{ steps.job1.outputs.slack_message }}"
        
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: check if file exists
#         id: file_exists
#         run: | 
#           x=$(echo "bla" | grep a | wc -l)
#           if [ $x == 0 ]; then
#             echo "::set-output name=slack_message::file doesnt exists" 
#           else
#             echo "::set-output name=slack_message::file exists"
#           fi
#           sleep 5
#           echo "second: $SECONDS"
#           #jq -n --arg appname "bla" '{apps: [ {name: "bla", script: "./cms/bin/www", watch: false}]}' > ./payload-slack-content.json
#           #jq -n --arg appname "bla" '{name: $appname, script: "./cms/bin/www", watch: false}' > ./payload-slack-content.json
#           jq -n --arg appname "bla" '{"name": "app", "script": "./cms/bin/www"}' > ./payload-slack-content.json
#       - name: slack message
#         run: |
#            echo "slack message - ${{ steps.file_exists.outputs.slack_message }}"
#            sleep 2
#            echo "second: $SECONDS"



#       - name: Slack Notification
#         if: always()
#         uses: rtCamp/action-slack-notify@v2
#         env:
#           SLACK_CHANNEL: test
#           SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
#           SLACK_ICON: https://github.com/rtCamp.png?size=48
#           SLACK_TITLE: AWS Cluster
#           SLACK_MESSAGE: "Helm Status: ${{ steps.job1.outputs.slack_message }}\nJob runtime: process.env.AS_TOOK"
#           #SLACK_USERNAME: Oren Zamir
#           SLACK_LINK_NAMES: true
#           SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
#           SLACK_FOOTER: Testing envs


#       - uses: 8398a7/action-slack@v3
#         if: always()
#         with:
#           #status: ${{ job.status }}
#           #fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
#           status: custom
#           fields: workflow,job,commit,repo,ref,author,took,message,action
#           custom_payload: |
#             {
#               attachments: [{
#                 color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
#                 text: `
#             Cluster: AWS Staging
#             Commit owner: @orenz
#             Commit URL: ${process.env.AS_COMMIT}
#             Branch name: ${process.env.GITHUB_REF_NAME}
#             Job URL: ${process.env.AS_JOB}
#             Helm Status: ${{ steps.job1.outputs.slack_message }}
            
#             Job runtime: ${process.env.AS_TOOK}
#             JOB2: ${{ steps.job2.outputs.job2 }}`,
#               }]
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}










#       - uses: 8398a7/action-slack@v3
#         if: always()
#         with:
#           #status: ${{ job.status }}
#           #fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
#           status: custom
#           fields: workflow,job,commit,repo,ref,author,took,message,action
#           custom_payload: |
#             {
#               text: "AWS Cluster",
#               attachments: [{
#                 color: "${{ job.status }}",
#                 fields: [
#                 {
#                   title: 'Repo',
#                   value: process.env.AS_REPO,
#                   short: false
#                 },
#                 {
#                   title: 'Commit',
#                   value: process.env.AS_COMMIT,
#                   short: false
#                 },
#                 {
#                   title: 'Job',
#                   value: process.env.AS_JOB,
#                   short: false
#                 },
#                 {
#                   title: 'Action',
#                   value: process.env.AS_COMMIT,
#                   short: false
#                 },
#                 {
#                   title: 'Message',
#                   value: process.env.AS_MESSAGE,
#                   short: true
#                 },
#                 {
#                   title: 'Author',
#                   value: process.env.AS_AUTHOR,
#                   short: true
#                 },
#                 {
#                   title: 'Took',
#                   value: process.env.AS_TOOK,
#                   short: true
#                 },
#                 {
#                   title: 'Workflow',
#                   value: process.env.AS_WORKFLOW,
#                   short: true
#                 },
#                 {
#                   title: 'Helm status',
#                   value: steps.job1.outputs.slack_message,
#                   short: false
#                 }
#                 ],
#                 actions: [{
#                 }]
#               }]
#             }
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}








                #text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,

#       - name: Send custom JSON data to Slack workflow
#         id: slack
#         uses: slackapi/slack-github-action@v1.19.0
#         with:
#           payload-file-path: "./payload-slack-content.json"
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


      # EKS Login
#       - name: EKS Login
#         run: |
#            ls -al
#            exit 1
#           aws eks --region us-east-1 update-kubeconfig --name test-cluster
#           kubectl get ns

