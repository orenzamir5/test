# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  job1:
    #name: job1
    #strategy:
    #  matrix:
    #     service: [build]
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        id: job1
        run: | 
          #ls -al
          #chmod +x .github/scripts/runner.sh
          #.github/scripts/runner.sh
          helm_histroy=$(cat .github/scripts/helm_history)
          helm_histroy="${helm_histroy//'%'/'%25'}"
          helm_histroy="${helm_histroy//$'\n'/'%0A'}"
          helm_histroy="${helm_histroy//$'\r'/'%0D'}"
          output_message="Error! Cluster version: 0.1.2233, Desired version: 0.1.2231\nStatus: deployed\n\nHistory:\n${helm_histroy}"
          #output_message=$(echo -e "bla1\n bla2")
          output_message="${output_message//'%'/'%25'}"
          output_message="${output_message//$'\n'/'%0A'}"
          output_message="${output_message//$'\r'/'%0D'}"
          echo "::set-output name=slack_message::$output_message"
        
      - name: Run a one-line script
        run: echo "slack message - ${{ steps.job1.outputs.slack_message }}"
          
  
  # This workflow contains a single job called "build"
#   build:
#     name: build
#     # The type of runner that the job will run on
#     runs-on: ubuntu-latest

#     # Steps represent a sequence of tasks that will be executed as part of the job
#     steps:
#       # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
#       - uses: actions/checkout@v3

#       # Runs a single command using the runners shell
#       - name: Run a one-line script
#         run: echo "slack message - ${{ steps.job1.outputs.slack_message }}"
        
#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: us-east-1

#       - name: check if file exists
#         id: file_exists
#         run: | 
#           x=$(echo "bla" | grep a | wc -l)
#           if [ $x == 0 ]; then
#             echo "::set-output name=slack_message::file doesnt exists" 
#           else
#             echo "::set-output name=slack_message::file exists"
#           fi
#           sleep 5
#           echo "second: $SECONDS"
#           #jq -n --arg appname "bla" '{apps: [ {name: "bla", script: "./cms/bin/www", watch: false}]}' > ./payload-slack-content.json
#           #jq -n --arg appname "bla" '{name: $appname, script: "./cms/bin/www", watch: false}' > ./payload-slack-content.json
#           jq -n --arg appname "bla" '{"name": "app", "script": "./cms/bin/www"}' > ./payload-slack-content.json
#       - name: slack message
#         run: |
#            echo "slack message - ${{ steps.file_exists.outputs.slack_message }}"
#            sleep 2
#            echo "second: $SECONDS"

      - uses: 8398a7/action-slack@v3
        with:
          #status: ${{ job.status }}
          #fields: repo,message,commit,author,action,eventName,ref,workflow,job,took,pullRequest # selectable (default: repo,message)
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `Cluster: AWS Staging
                Commit owner: @orenz
                Commit URL: ${process.env.AS_COMMIT}
                Branch name: ${process.env.GITHUB_REF_NAME}
                Job URL: ${process.env.AS_JOB}
                Helm Status:
                ${{ steps.job1.outputs.slack_message }}\n
                Job runtime: ${process.env.AS_TOOK}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() # Pick up events even if the job fails or is canceled.

                #text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,

#       - name: Send custom JSON data to Slack workflow
#         id: slack
#         uses: slackapi/slack-github-action@v1.19.0
#         with:
#           payload-file-path: "./payload-slack-content.json"
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


      # EKS Login
#       - name: EKS Login
#         run: |
#            ls -al
#            exit 1
#           aws eks --region us-east-1 update-kubeconfig --name test-cluster
#           kubectl get ns

